name: Copy Tekton Files for New Release

on:
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  copy-tekton-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Automation Repository
        uses: actions/checkout@v3
        with:
          path: automation_repo
          token: ${{ secrets.GH_TOKEN }}

      - name: Verify repos.txt existence
        run: |
          echo "Listing files to verify repos.txt location:"
          ls -al automation_repo
          echo "Attempting to read repos.txt"
          cat automation_repo/repos.txt

      - name: Fetch and Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Read and process repos.txt
        id: process_repos
        run: |
          # Ensure repos.txt is correctly located
          if [ ! -f automation_repo/repos.txt ]; then
            echo "Error: repos.txt not found."
            exit 1
          fi

          # Read each repository URL from repos.txt
          while IFS= read -r repo_url; do
            # Skip empty lines and comments
            if [[ -z "$repo_url" || "$repo_url" =~ ^# ]]; then
              continue
            fi

            repo_name=$(basename "$repo_url" .git)
            echo "Processing repository: $repo_url"

            # Clone the repository
            if ! git clone "$repo_url"; then
              echo "Failed to clone $repo_url"
              continue
            fi

            cd "$repo_name" || { echo "Failed to enter directory $repo_name"; continue; }

            # Fetch all branches
            git fetch --all

            # Get the latest branch matching the pattern 'rhoai-x.y'
            latest_branch=$(git branch -r | grep -o 'origin/rhoai-[0-9]*\.[0-9]*' | sed 's/origin\///' | sort -V | tail -n 1)
            if [ -z "$latest_branch" ]; then
              echo "No branches matching 'rhoai-x.y' found in $repo_name."
              cd ..
              rm -rf "$repo_name"
              continue
            fi
            echo "Latest branch in $repo_name: $latest_branch"

            # Derive the previous branch name
            MAJOR=$(echo "$latest_branch" | cut -d. -f1 | sed 's/rhoai-//')
            MINOR=$(echo "$latest_branch" | cut -d. -f2)
            PREV_MINOR=$((MINOR-1))
            PREV_BRANCH="rhoai-${MAJOR}.${PREV_MINOR}"

            # Check out the previous branch
            if ! git checkout "$PREV_BRANCH" 2>/dev/null; then
              echo "Branch $PREV_BRANCH does not exist in $repo_name."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            echo "Checked out branch $PREV_BRANCH"

            # Ensure Tekton files exist in the previous branch
            if [ -d ".tekton" ]; then
              # Copy Tekton files to a temporary directory
              mkdir -p ../tekton_copy
              cp -r .tekton/* ../tekton_copy/
            else
              echo "Tekton directory does not exist in branch $PREV_BRANCH."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            # Check out the latest branch
            if ! git checkout "$latest_branch"; then
              echo "Failed to check out branch $latest_branch in $repo_name."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            echo "Checked out branch $latest_branch"

            # Ensure Tekton directory exists in the latest branch and copy files
            mkdir -p .tekton
            if [ -d "../tekton_copy" ]; then
              cp -r ../tekton_copy/* .tekton/
            else
              echo "Tekton copy directory does not exist."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            # Check for changes
            if git diff-index --quiet HEAD --; then
              echo "No changes to commit for branch $latest_branch."
              cd ..
              rm -rf "$repo_name"
              continue
            fi

            # Set Git identity and push changes
            git config user.name "github-actions"
            git config user.email "4github-actions@users.noreply.github.com"
            git add .tekton
            git commit -m "Copy Tekton files from $PREV_BRANCH to $latest_branch"

            # Push changes
            push_url="https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${repo_url#https://github.com/}"
            echo "Pushing changes to $push_url"
            if ! git push "$push_url" "$latest_branch"; then
              echo "Failed to push changes to $push_url"
            fi

            # Clean up for the next repository
            cd ..
            rm -rf "$repo_name"
          done < automation_repo/repos.txt
