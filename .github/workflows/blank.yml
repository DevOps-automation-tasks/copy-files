name: Copy Tekton Files for New Release

on:
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  copy-tekton-files:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout automation repository
      uses: actions/checkout@v3

    - name: Ensure repos.yaml is in the directory
      run: ls -al  # List directory contents to verify repos.yaml location

    - name: Install Python and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip
        pip3 install pyyaml

    - name: Read and parse repos.yaml
      id: read_repos
      run: |
        import yaml

        # Load the YAML file
        with open('repos.yaml', 'r') as file:
            data = yaml.safe_load(file)
        
        # Extract repo URLs
        repos = [repo['repo-url'] for repo in data['git']]
        
        # Print repos for debugging
        print("Repos:", repos)
        
        # Export repos as environment variable
        with open('/tmp/repos.txt', 'w') as file:
            for repo in repos:
                file.write(f"{repo}\n")
        
        print(f"REPOS_FILE=/tmp/repos.txt")
        print(f"REPOS={','.join(repos)}")
        with open('/tmp/env.txt', 'w') as file:
            file.write(f"REPOS_FILE=/tmp/repos.txt\nREPOS={','.join(repos)}")

    - name: Upload environment file for next steps
      uses: actions/upload-artifact@v3
      with:
        name: env
        path: /tmp/env.txt

    - name: Iterate over repos
      run: |
        # Load the environment variables
        source /tmp/env.txt

        # Set the new version (or take it as input)
        NEW_VERSION="2.13"  # Set manually or pass as input

        # Parse the major and minor versions
        MAJOR=$(echo $NEW_VERSION | cut -d. -f1)
        MINOR=$(echo $NEW_VERSION | cut -d. -f2)

        # Decrement the minor version for the previous branch
        PREVIOUS_MINOR=$((MINOR-1))
        PREVIOUS_VERSION="$MAJOR.$PREVIOUS_MINOR"

        # Set branch names
        PREVIOUS_BRANCH="rhoai-${PREVIOUS_VERSION}"
        NEW_BRANCH="rhoai-${NEW_VERSION}"

        echo "Processing repositories with new branch: $NEW_BRANCH"
        echo "Previous branch: $PREVIOUS_BRANCH"

        # Loop through each repository and perform the required operations
        while IFS= read -r repo_url; do
          repo_name=$(basename $repo_url .git)
          echo "Cloning repository: $repo_url"
          
          # Clone the repository
          git clone $repo_url
          cd $repo_name
          
          # Fetch all branches
          git fetch --all

          # Check if the previous branch exists
          if git show-ref --verify --quiet "refs/heads/${PREVIOUS_BRANCH}"; then
            git checkout $PREVIOUS_BRANCH
          else
            echo "Previous branch $PREVIOUS_BRANCH does not exist for $repo_name. Skipping."
            cd ..
            rm -rf $repo_name
            continue
          fi
          
          # Copy Tekton files
          cp -r tekton/ ../tekton_copy/

          # Replace version names in Tekton files
          cd ../tekton_copy/
          find . -type f -exec sed -i "s/${PREVIOUS_BRANCH}/${NEW_BRANCH}/g" {} +
          
          # Create a new branch and apply changes
          cd ../$repo_name
          git checkout -b $NEW_BRANCH
          mv ../tekton_copy/* ./tekton/
          git add .
          git commit -m "Copy Tekton files from $PREVIOUS_BRANCH to $NEW_BRANCH"
          git push origin $NEW_BRANCH
          
          # Disable Bundle Nudging (adding the on-cel rule)
          sed -i '/bundle.manifests\/rhods-operator.clusterserviceversion.yml/a && !”bundle\/manifests\/rhods-operator.clusterserviceversion.yml”.pathChanged()' .github/workflows/bundle-push.yml
          git add .github/workflows/bundle-push.yml
          git commit -m "Disable bundle nudging for $NEW_BRANCH"
          git push origin $NEW_BRANCH

          cd ..
          rm -rf $repo_name  # Clean up for the next repository
        done < $REPOS_FILE
